//Generates partial products (initial summands) for signed integer mutliplication

CHIP InputsS
{
	IN X[8], Y[8];
	OUT PP0[16], PP1[16], PP2[16], PP3[16], PP4[16], PP5[16], PP6[16], PP7[16], CB[16];

	PARTS: //First 8 lines for each of PP0 to PP6 are same as for unsigned, remaining lines for sign extension. 0 valued bits from the LSB are assigned by default
		And(a = X[0], b = Y[0], out = PP0[0]);
		And(a = X[1], b = Y[0], out = PP0[1]);
		And(a = X[2], b = Y[0], out = PP0[2]);
		And(a = X[3], b = Y[0], out = PP0[3]);
		And(a = X[4], b = Y[0], out = PP0[4]);
		And(a = X[5], b = Y[0], out = PP0[5]);
		And(a = X[6], b = Y[0], out = PP0[6]);
		And(a = X[7], b = Y[0], out = PP0[7]);
		And(a = X[7], b = Y[0], out = PP0[8]);
		And(a = X[7], b = Y[0], out = PP0[9]);
		And(a = X[7], b = Y[0], out = PP0[10]);
		And(a = X[7], b = Y[0], out = PP0[11]);
		And(a = X[7], b = Y[0], out = PP0[12]);
		And(a = X[7], b = Y[0], out = PP0[13]);
		And(a = X[7], b = Y[0], out = PP0[14]);
		And(a = X[7], b = Y[0], out = PP0[15]);

		And(a = X[0], b = Y[1], out = PP1[1]);
		And(a = X[1], b = Y[1], out = PP1[2]);
		And(a = X[2], b = Y[1], out = PP1[3]);
		And(a = X[3], b = Y[1], out = PP1[4]);
		And(a = X[4], b = Y[1], out = PP1[5]);
		And(a = X[5], b = Y[1], out = PP1[6]);
		And(a = X[6], b = Y[1], out = PP1[7]);
		And(a = X[7], b = Y[1], out = PP1[8]);
		And(a = X[7], b = Y[1], out = PP1[9]);
		And(a = X[7], b = Y[1], out = PP1[10]);
		And(a = X[7], b = Y[1], out = PP1[11]);
		And(a = X[7], b = Y[1], out = PP1[12]);
		And(a = X[7], b = Y[1], out = PP1[13]);
		And(a = X[7], b = Y[1], out = PP1[14]);
		And(a = X[7], b = Y[1], out = PP1[15]);

		And(a = X[0], b = Y[2], out = PP2[2]);
		And(a = X[1], b = Y[2], out = PP2[3]);
		And(a = X[2], b = Y[2], out = PP2[4]);
		And(a = X[3], b = Y[2], out = PP2[5]);
		And(a = X[4], b = Y[2], out = PP2[6]);
		And(a = X[5], b = Y[2], out = PP2[7]);
		And(a = X[6], b = Y[2], out = PP2[8]);
		And(a = X[7], b = Y[2], out = PP2[9]);
		And(a = X[7], b = Y[2], out = PP2[10]);
		And(a = X[7], b = Y[2], out = PP2[11]);
		And(a = X[7], b = Y[2], out = PP2[12]);
		And(a = X[7], b = Y[2], out = PP2[13]);
		And(a = X[7], b = Y[2], out = PP2[14]);
		And(a = X[7], b = Y[2], out = PP2[15]);

		And(a = X[0], b = Y[3], out = PP3[3]);
		And(a = X[1], b = Y[3], out = PP3[4]);
		And(a = X[2], b = Y[3], out = PP3[5]);
		And(a = X[3], b = Y[3], out = PP3[6]);
		And(a = X[4], b = Y[3], out = PP3[7]);
		And(a = X[5], b = Y[3], out = PP3[8]);
		And(a = X[6], b = Y[3], out = PP3[9]);
		And(a = X[7], b = Y[3], out = PP3[10]);
		And(a = X[7], b = Y[3], out = PP3[11]);
		And(a = X[7], b = Y[3], out = PP3[12]);
		And(a = X[7], b = Y[3], out = PP3[13]);
		And(a = X[7], b = Y[3], out = PP3[14]);
		And(a = X[7], b = Y[3], out = PP3[15]);

		And(a = X[0], b = Y[4], out = PP4[4]);
		And(a = X[1], b = Y[4], out = PP4[5]);
		And(a = X[2], b = Y[4], out = PP4[6]);
		And(a = X[3], b = Y[4], out = PP4[7]);
		And(a = X[4], b = Y[4], out = PP4[8]);
		And(a = X[5], b = Y[4], out = PP4[9]);
		And(a = X[6], b = Y[4], out = PP4[10]);
		And(a = X[7], b = Y[4], out = PP4[11]);
		And(a = X[7], b = Y[4], out = PP4[12]);
		And(a = X[7], b = Y[4], out = PP4[13]);
		And(a = X[7], b = Y[4], out = PP4[14]);
		And(a = X[7], b = Y[4], out = PP4[15]);

		And(a = X[0], b = Y[5], out = PP5[5]);
		And(a = X[1], b = Y[5], out = PP5[6]);
		And(a = X[2], b = Y[5], out = PP5[7]);
		And(a = X[3], b = Y[5], out = PP5[8]);
		And(a = X[4], b = Y[5], out = PP5[9]);
		And(a = X[5], b = Y[5], out = PP5[10]);
		And(a = X[6], b = Y[5], out = PP5[11]);
		And(a = X[7], b = Y[5], out = PP5[12]);
		And(a = X[7], b = Y[5], out = PP5[13]);
		And(a = X[7], b = Y[5], out = PP5[14]);
		And(a = X[7], b = Y[5], out = PP5[15]);

		And(a = X[0], b = Y[6], out = PP6[6]);
		And(a = X[1], b = Y[6], out = PP6[7]);
		And(a = X[2], b = Y[6], out = PP6[8]);
		And(a = X[3], b = Y[6], out = PP6[9]);
		And(a = X[4], b = Y[6], out = PP6[10]);
		And(a = X[5], b = Y[6], out = PP6[11]);
		And(a = X[6], b = Y[6], out = PP6[12]);
		And(a = X[7], b = Y[6], out = PP6[13]);
		And(a = X[7], b = Y[6], out = PP6[14]);
		And(a = X[7], b = Y[6], out = PP6[15]);

		Not(in = X[0], out = notX);
		Or(a = X[0], b = notX, out = set1);

		And(a = set1, b = set1, out = PP7[0]);
		And(a = set1, b = set1, out = PP7[1]);
		And(a = set1, b = set1, out = PP7[2]);
		And(a = set1, b = set1, out = PP7[3]);
		And(a = set1, b = set1, out = PP7[4]);
		And(a = set1, b = set1, out = PP7[5]);
		And(a = set1, b = set1, out = PP7[6]); //0 valued bits at start are 1 valued in 1's complement

		And(a = X[0], b = Y[7], out = notPP77);
		And(a = X[1], b = Y[7], out = notPP78);
		And(a = X[2], b = Y[7], out = notPP79);
		And(a = X[3], b = Y[7], out = notPP710);
		And(a = X[4], b = Y[7], out = notPP711);
		And(a = X[5], b = Y[7], out = notPP712);
		And(a = X[6], b = Y[7], out = notPP713);
		And(a = X[7], b = Y[7], out = notPP714);

		Not(in = notPP77, out = PP7[7]);
		Not(in = notPP78, out = PP7[8]);
		Not(in = notPP79, out = PP7[9]);
		Not(in = notPP710, out = PP7[10]);
		Not(in = notPP711, out = PP7[11]);
		Not(in = notPP712, out = PP7[12]);
		Not(in = notPP713, out = PP7[13]);
		Not(in = notPP714, out = PP7[14]); //1's complement version for bits 7-14
		Not(in = notPP714, out = PP7[15]); //sign extension

		And(a = set1, b = set1, out = CB[0]); //Carry bit (9th summand) of 0000000000000001, 0's set by default
}