//16-bit partial product generator for unsigned integer multiplication

CHIP InputsUS
{
	IN X[8], Y[8];
	OUT PP0[16], PP1[16], PP2[16], PP3[16], PP4[16], PP5[16], PP6[16], PP7[16];

	PARTS: //First 8 lines generate PP0, next PP1, so on. The other 8 unassigned bits in each partial product are by default assigned 0, which is the required value.
		And(a = X[0], b = Y[0], out = PP0[0]);
		And(a = X[1], b = Y[0], out = PP0[1]);
		And(a = X[2], b = Y[0], out = PP0[2]);
		And(a = X[3], b = Y[0], out = PP0[3]);
		And(a = X[4], b = Y[0], out = PP0[4]);
		And(a = X[5], b = Y[0], out = PP0[5]);
		And(a = X[6], b = Y[0], out = PP0[6]);
		And(a = X[7], b = Y[0], out = PP0[7]);

		And(a = X[0], b = Y[1], out = PP1[1]);
		And(a = X[1], b = Y[1], out = PP1[2]);
		And(a = X[2], b = Y[1], out = PP1[3]);
		And(a = X[3], b = Y[1], out = PP1[4]);
		And(a = X[4], b = Y[1], out = PP1[5]);
		And(a = X[5], b = Y[1], out = PP1[6]);
		And(a = X[6], b = Y[1], out = PP1[7]);
		And(a = X[7], b = Y[1], out = PP1[8]);

		And(a = X[0], b = Y[2], out = PP2[2]);
		And(a = X[1], b = Y[2], out = PP2[3]);
		And(a = X[2], b = Y[2], out = PP2[4]);
		And(a = X[3], b = Y[2], out = PP2[5]);
		And(a = X[4], b = Y[2], out = PP2[6]);
		And(a = X[5], b = Y[2], out = PP2[7]);
		And(a = X[6], b = Y[2], out = PP2[8]);
		And(a = X[7], b = Y[2], out = PP2[9]);

		And(a = X[0], b = Y[3], out = PP3[3]);
		And(a = X[1], b = Y[3], out = PP3[4]);
		And(a = X[2], b = Y[3], out = PP3[5]);
		And(a = X[3], b = Y[3], out = PP3[6]);
		And(a = X[4], b = Y[3], out = PP3[7]);
		And(a = X[5], b = Y[3], out = PP3[8]);
		And(a = X[6], b = Y[3], out = PP3[9]);
		And(a = X[7], b = Y[3], out = PP3[10]);

		And(a = X[0], b = Y[4], out = PP4[4]);
		And(a = X[1], b = Y[4], out = PP4[5]);
		And(a = X[2], b = Y[4], out = PP4[6]);
		And(a = X[3], b = Y[4], out = PP4[7]);
		And(a = X[4], b = Y[4], out = PP4[8]);
		And(a = X[5], b = Y[4], out = PP4[9]);
		And(a = X[6], b = Y[4], out = PP4[10]);
		And(a = X[7], b = Y[4], out = PP4[11]);

		And(a = X[0], b = Y[5], out = PP5[5]);
		And(a = X[1], b = Y[5], out = PP5[6]);
		And(a = X[2], b = Y[5], out = PP5[7]);
		And(a = X[3], b = Y[5], out = PP5[8]);
		And(a = X[4], b = Y[5], out = PP5[9]);
		And(a = X[5], b = Y[5], out = PP5[10]);
		And(a = X[6], b = Y[5], out = PP5[11]);
		And(a = X[7], b = Y[5], out = PP5[12]);

		And(a = X[0], b = Y[6], out = PP6[6]);
		And(a = X[1], b = Y[6], out = PP6[7]);
		And(a = X[2], b = Y[6], out = PP6[8]);
		And(a = X[3], b = Y[6], out = PP6[9]);
		And(a = X[4], b = Y[6], out = PP6[10]);
		And(a = X[5], b = Y[6], out = PP6[11]);
		And(a = X[6], b = Y[6], out = PP6[12]);
		And(a = X[7], b = Y[6], out = PP6[13]);

		And(a = X[0], b = Y[7], out = PP7[7]);
		And(a = X[1], b = Y[7], out = PP7[8]);
		And(a = X[2], b = Y[7], out = PP7[9]);
		And(a = X[3], b = Y[7], out = PP7[10]);
		And(a = X[4], b = Y[7], out = PP7[11]);
		And(a = X[5], b = Y[7], out = PP7[12]);
		And(a = X[6], b = Y[7], out = PP7[13]);
		And(a = X[7], b = Y[7], out = PP7[14]);
}