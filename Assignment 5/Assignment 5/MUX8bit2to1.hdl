//8-bit 2-to-1 line MUX

CHIP MUX8bit2to1
{
	IN a[8], b[8], S;
	OUT out[8];

	PARTS:
		Not(in = S, out = notS); //notS is m0, S is m1 (minterms), used to calculate result

		And(a = notS, b = a[0], out = t00);
		And(a = S, b = b[0], out = t01);
		Or(a = t00, b = t01, out = out[0]);

		And(a = notS, b = a[1], out = t10);
		And(a = S, b = b[1], out = t11);
		Or(a = t10, b = t11, out = out[1]);

		And(a = notS, b = a[2], out = t20);
		And(a = S, b = b[2], out = t21);
		Or(a = t20, b = t21, out = out[2]);

		And(a = notS, b = a[3], out = t30);
		And(a = S, b = b[3], out = t31);
		Or(a = t30, b = t31, out = out[3]);

		And(a = notS, b = a[4], out = t40);
		And(a = S, b = b[4], out = t41);
		Or(a = t40, b = t41, out = out[4]);

		And(a = notS, b = a[5], out = t50);
		And(a = S, b = b[5], out = t51);
		Or(a = t50, b = t51, out = out[5]);

		And(a = notS, b = a[6], out = t60);
		And(a = S, b = b[6], out = t61);
		Or(a = t60, b = t61, out = out[6]);

		And(a = notS, b = a[7], out = t70);
		And(a = S, b = b[7], out = t71);
		Or(a = t70, b = t71, out = out[7]);
}