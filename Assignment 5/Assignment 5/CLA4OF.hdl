CHIP CLA4OF
{
	IN X[4], Y[4], cin, u, s;
	OUT S[4], OF;

	PARTS:
		Xor(a = X[0], b = Y[0], out = P0);
		Xor(a = X[1], b = Y[1], out = P1);
		Xor(a = X[2], b = Y[2], out = P2);
		Xor(a = X[3], b = Y[3], out = P3); //Propagate bits calculated

		And(a = X[0], b = Y[0], out = G0);
		And(a = X[1], b = Y[1], out = G1);
		And(a = X[2], b = Y[2], out = G2);
		And(a = X[3], b = Y[3], out = G3); //Generate bits calculated

		And(a = P0, b = cin, out = c11);
		Or(a = c11, b = G0, out = c1);

		And3(a = P1, b = P0, c = cin, out = c21);
		And(a = P1, b = G0, out = c22);
		Or3(a = c21, b =  c22, c = G1, out = c2);

		And4(a = P2, b = P1, c = P0, d = cin, out = c31);
		And3(a = P2, b = P1, c = G0, out = c32);
		And(a = P2, b = G1, out = c33);
		Or4(a = c31, b = c32, c = c33, d = G2, out = c3);

		And5(a = P3, b = P2, c = P1, d = P0, e = cin, out = c41);
		And4(a = P3, b = P2, c = P1, d = G0, out = c42);
		And3(a = P3, b = P2, c = G1, out = c43);
		And(a = P3, b = G2, out = c44);
		Or5(a = c41, b = c42, c = c43, d = c44, e = G3, out = c4); //Carry bits calculated

		Xor(a = P0, b = cin, out = S[0]);
		Xor(a = P1, b = c1, out = S[1]);
		Xor(a = P2, b = c2, out = S[2]);
		Xor(a = P3, b = c3, out = S[3]); //Sum bits calculated

		Xor(a = c3, b = c4, out = OFs); //Overflow flag for signed arithmetic
		Xor(a = c4, b = s, out = OFu); //Overflow flag for unsigned arithmetic

		Not(in = u, out = notu);
		And(a = notu, b = OFs, out = t1);
		And(a = u, b = OFu, out = t2);
		Or(a = t1, b = t2, out = OF); //u (unsigned decider) allows corresponding overflow flag to dominate in the overall flag
}