//Generates 8-bit product and overflow bits for the cases of same signed operands and opposite signed operands

CHIP OutputsS
{
	IN in[16];
	OUT out[8], OFs, OFo;

	PARTS:
		And(a = in[0], b = in[0], out = out[0]);
		And(a = in[1], b = in[1], out = out[1]);
		And(a = in[2], b = in[2], out = out[2]);
		And(a = in[3], b = in[3], out = out[3]);
		And(a = in[4], b = in[4], out = out[4]);
		And(a = in[5], b = in[5], out = out[5]);
		And(a = in[6], b = in[6], out = out[6]);
		And(a = in[7], b = in[7], out = out[7]); //8-bit product generated

		Or9(a = in[7], b = in[8], c = in[9], d = in[10], e = in[11], f = in[12], g = in[13], h = in[14], i = in[15], out = OFs); //Same sign overflow bit (P8 + P9 + ... + P15)
		Nand9(a = in[7], b = in[8], c = in[9], d = in[10], e = in[11], f = in[12], g = in[13], h = in[14], i = in[15], out = OFo); //Opposite sign overflow bit (P8' + P9' + ... + P15' = Nand(P8, P9, ..., P15))
}