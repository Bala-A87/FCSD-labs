CHIP MUX10-bit2-1{
IN x1[10], y1[10], s;
OUT z[10];

PARTS:
Not(in=s, out=nots);
And(a=nots, b=x1[0], out=z10);
And(a=nots, b=x1[1], out=z11);
And(a=nots, b=x1[2], out=z12);
And(a=nots, b=x1[3], out=z13);
And(a=nots, b=x1[4], out=z14);
And(a=nots, b=x1[5], out=z15);
And(a=nots, b=x1[6], out=z16);
And(a=nots, b=x1[7], out=z17);
And(a=nots, b=x1[8], out=z18);
And(a=nots, b=x1[9], out=z19);

And(a=s, b=y1[0], out=z20);
And(a=s, b=y1[1], out=z21);
And(a=s, b=y1[2], out=z22);
And(a=s, b=y1[3], out=z23);
And(a=s, b=y1[4], out=z24);
And(a=s, b=y1[5], out=z25);
And(a=s, b=y1[6], out=z26);
And(a=s, b=y1[7], out=z27);
And(a=s, b=y1[8], out=z28);
And(a=s, b=y1[9], out=z29);

Or(a=z10, b=z20, out=z[0]);
Or(a=z11, b=z21, out=z[1]);
Or(a=z12, b=z22, out=z[2]);
Or(a=z13, b=z23, out=z[3]);
Or(a=z14, b=z24, out=z[4]);
Or(a=z15, b=z25, out=z[5]);
Or(a=z16, b=z26, out=z[6]);
Or(a=z17, b=z27, out=z[7]);
Or(a=z18, b=z28, out=z[8]);
Or(a=z19, b=z29, out=z[9]);
}